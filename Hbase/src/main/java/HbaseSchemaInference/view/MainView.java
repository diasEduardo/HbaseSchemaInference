/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package HbaseSchemaInference.view;

import HbaseSchemaInference.control.App;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Date;
import javax.swing.JList;

/**
 *
 * @author eduardo
 */
public class MainView extends javax.swing.JFrame {

    private App app;
    private String[] schemas;

    public MainView() {
        initComponents();
    }

    public MainView(App main) {
        app = main;

        initComponents();
        getNamespaces();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        namespacesScroll = new javax.swing.JScrollPane();
        avaliableNamespaces = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        refreshNamespaces = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 24), new java.awt.Dimension(0, 24), new java.awt.Dimension(32767, 24));
        jSeparator1 = new javax.swing.JSeparator();
        refreshSchemes = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        schemasScroll = new javax.swing.JScrollPane();
        AvaliableSchemes = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        namespaceLabel = new javax.swing.JLabel();
        newScheme = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        avaliableNamespaces.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "testes" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        avaliableNamespaces.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        namespacesScroll.setViewportView(avaliableNamespaces);

        jLabel1.setText("Namespaces disponiveis:");

        refreshNamespaces.setText("Atualizar");
        refreshNamespaces.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                refreshNamespacesMouseReleased(evt);
            }
        });
        refreshNamespaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshNamespacesActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        refreshSchemes.setText("Atualizar");
        refreshSchemes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                refreshSchemesMouseReleased(evt);
            }
        });

        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLabel2.setText("Esquemas:");

        schemasScroll.setViewportView(AvaliableSchemes);

        jLabel3.setText("Namespace: ");

        namespaceLabel.setText("N");

        newScheme.setText("Gerar Novo");
        newScheme.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                newSchemeMouseReleased(evt);
            }
        });
        newScheme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newSchemeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(namespacesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(refreshNamespaces)
                        .addGap(38, 38, 38)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(refreshSchemes)
                        .addGap(22, 22, 22)
                        .addComponent(newScheme))
                    .addComponent(schemasScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(156, 156, 156))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(namespaceLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(jSeparator2)
                .addGap(31, 31, 31))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(namespaceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(schemasScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshSchemes)
                    .addComponent(newScheme))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jSeparator1)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(namespacesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshNamespaces)
                        .addContainerGap(25, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshNamespacesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshNamespacesMouseReleased
        getNamespaces();
    }//GEN-LAST:event_refreshNamespacesMouseReleased

    private void refreshSchemesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshSchemesMouseReleased
        if (refreshSchemes.isEnabled()) {
            selectNamespace();
        }
    }//GEN-LAST:event_refreshSchemesMouseReleased

    private void refreshNamespacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshNamespacesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refreshNamespacesActionPerformed

    private void newSchemeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newSchemeMouseReleased
        if (newScheme.isEnabled()) {

        }
    }//GEN-LAST:event_newSchemeMouseReleased

    private void newSchemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newSchemeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newSchemeActionPerformed

    private void selectNamespace() {
        if (avaliableNamespaces.getSelectedIndex() >= 0) {
            String selected = avaliableNamespaces.getSelectedValue();
            namespaceLabel.setText(selected);
            getSchemesList(selected);
        }
    }

    private void getSchemesList(String namespace) {
        String[] namespaces = app.getSchemes(namespace);
        schemas = namespaces;
        for (int i = 0; i < namespaces.length; i++) {
            String[] split = namespaces[i].split("_");
            long time = Long.parseLong(split[split.length-1]);
            Date date = new Date(time);
            namespaces[i] = date.toString();
        }
        AvaliableSchemes = new JList(namespaces);
        AvaliableSchemes.setSelectedIndex(-1);
        schemasScroll.setViewportView(AvaliableSchemes);
        refreshSchemes.setEnabled(true);
        newScheme.setEnabled(true);
    }

    private void getNamespaces() {
        String[] namespaces = app.getNamespaces();
        avaliableNamespaces = new JList(namespaces);
        avaliableNamespaces.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                selectNamespace();
            }
        });
        avaliableNamespaces.setSelectedIndex(-1);
        namespacesScroll.setViewportView(avaliableNamespaces);
        clearSchemesList();

    }

    private void clearSchemeView() {

    }

    private void clearSchemesList() {
        AvaliableSchemes = new JList();
        avaliableNamespaces.setSelectedIndex(-1);
        schemasScroll.setViewportView(AvaliableSchemes);
        namespaceLabel.setText("");
        refreshSchemes.setEnabled(false);
        newScheme.setEnabled(false);
        schemas = new String[0];
        clearSchemeView();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> AvaliableSchemes;
    private javax.swing.JList<String> avaliableNamespaces;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel namespaceLabel;
    private javax.swing.JScrollPane namespacesScroll;
    private javax.swing.JButton newScheme;
    private javax.swing.JButton refreshNamespaces;
    private javax.swing.JButton refreshSchemes;
    private javax.swing.JScrollPane schemasScroll;
    // End of variables declaration//GEN-END:variables
}
